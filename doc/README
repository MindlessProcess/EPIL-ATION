-----------------
|| EPIL(ATION)  |
-----------------

------------
| Summary: |
------------
1. What is Epil ?
  1.1 A C++ focused library
  1.2 Designed for runtime modification
2. Epil's architecture
  2.1 3 main parts
  2.2 The user-interface
  2.3 Core and Modules 
  2.4 The Util side
3. How-to
  3.1 Make a program Epil-friendly
  3.2 Run Epil
  3.3 Short examples
4. Applications examples
  4.1 Signal handling application
  4.2 Exception catcher application
5. Credits


=====================================


1. What is Epil ?
  1.1 A C++ focused library
    Epil is a C++ static library composed of several classes structured in different sections.
    The main goal of Epil is a program-inside utilization, to be implemented in an existing program.

  1.2 Designed for runtime modification
    Once implemented in one's program, Epil allows the latter to modify itself during runtime.
    Thus, it permits rewriting, recompiling and rerunning a source code while the programm is running.
    In other words, Epil grants a human-free control of a program, avoiding runtime errors and halts.

2. Epil's architecture
  2.1 Three main parts
    Epil is divided in three main parts, only two being really usable by the program.
    When you want to use Epil you should instanciate an Epil object preferably in the highest call scope.

  2.2 The user-interface
    The user-interface is represented by the Profile object. You should create one after Epil declaration.
    The user is now free to create a list of Action within a Profile object. The Actions should be added
    in the Profile with: setAction(my_action).
    To integrate the Profile in Epil, the user should use: loadProfile(my_profile) from the Epil object.
    
  2.3 Core and Modules
    The Core and Modules are all the necessary tools for a user to create different Actions. 
    The available actions are:
	- ActionWrite (please read below)
	- ActionCompile
	- ActionExec
    The ActionWrite will need a BlockList tool to set a range of lines to read/write from a file. 
    BlockList can be instanciated with:
    	 - a pair of ints (std::pair<int, int>)
	 - a list of pair of ints (std::list<std::pair<int, int> >)
    BlockList will help you select the range within a destination/source file for writing/reading operations.
    ActionWrite must set the destination/source file with: 
    	 void wr_setElem(epil::filetype, std::string filename, BlocList *);

    NOTE: Borderwise pairs will merge into 1 pair.
    Examples:
	pair(1, 9), pair(10, 14) => pair(1, 14)
	pair(3, 14), pair(9, 17) => pair(3, 17)

  2.4 The Utils side
    The Utils side is a library to make operations within files, strings, containers and streams.
    They are mainly used in ActionWrite to reach the correct lines to read/write.
    The user can use them for his personal implementation purposes.

3. How-to
  3.1 Epil's call
      
      #include <epil/Epil.h>

      int	main()
      {
        // How to instanciate Epil
	epil::Epil		*my_epil = new epil::Epil();

	return 0;
      }

  3.2 Use Epil

      #include <string>
      #include <epil/Epil.h>

      int	main()
      {
	std::string		name = "profile name";
	epil::Epil		*my_epil = new epil::Epil();

	// Make a profile to use Epil
	epil::Profile 		*my_profile = new epil::Profile(name);

	my_epil->loadProfile(my_profile);
	my_epil->useProfile(name);
	return 0;
      }

  3.3 Short example with Hello World

      #include <string>
      #include <epil/Epil.h>

      int	main()
      {
	std::string		name = "profile name";
	epil::Epil		*my_epil = new epil::Epil();
	epil::Profile 		*my_profile = new epil::Profile(name);
	epil::ActionExec 	*ex_action = new epil::ActionExec("ex_action", "echo 'Hello World'";

	my_profile->setAction(ex_action);
	my_epil->loadProfile(my_profile);
	my_epil->useProfile(name);
	return 0;
      }

4. Applications examples
  4.1 Signal handling application
   lyoma_app:
	The application has been defined to manage SIGINT and SIGSEGV and has
   	the following behaviors:

    SIGSEGV - It will modify the src/main/main.cpp and compile it with epil.a
    	      To be able to differenciate the behavior changement the output
	      of compilation will be a.out and will leave apps/lyoma_app/main.cpp
	      unchanged.

    SIGINT  - Will just use the makefile using the command "make re" with the flag
    	      "-ggdb3" and launch a gdb instance. This is very useful if the user
	      has already in mind a set of debugging criterias.

   a.out:
	The application will be have a new behavior with the previous signals. It
	will now exit after managing the signals.

     SIGSEGV - Will now launch valgrind with the instance an instance of ./a.out

     SIGINT  - Unchanged from ./lyoma_app
	
  4.2 Exception catcher application
      lucas_app:

5. Credits
  Epil is developped by Lyoma Guillou and Lucas Merlette since January 2014.
  It is an Epitech free project of the third year.


===============================================
===============================================
===============================================
===============================================
===============================================
===============================================
===============================================
===============================================
